(()=>{const e=e=>(s,n,o={})=>{const t={method:s,sessionId:n,params:o};return e(`Sending message to SafariWebExtensionHandler: ${JSON.stringify(t)}`),browser.runtime.sendNativeMessage("ignored",t.method)},s=(e,s)=>(n,o,t={})=>{const r={destination:n,method:o,params:t,sessionId:s};return e(`Sending message to browser runtime: ${JSON.stringify(r)}`),browser.runtime.sendMessage(r)},n=(e,s)=>(n,o,t={})=>{const r={destination:n,method:o,params:t,sessionId:s};e(`Sending message to browser tabs: ${JSON.stringify(r)}`),browser.tabs.query({active:!0,currentWindow:!0},(e=>{const[s]=e;s&&s.id&&browser.tabs.sendMessage(s.id,r)}))},o=(e,s)=>(n,o={})=>{const t={method:n,params:o};return e(`Sending message to Ethereum.js: ${JSON.stringify(t)}`),s(t)},t=({logger:t})=>{const r=({method:e,params:s})=>n(t)("content",e,s),a=o(t,(e=>r({method:"forwardToEthereumJs",params:e})));return{sendToContent:r,sendToEthereumJs:a,sendToPopup:(e,n={})=>s(t)("popup",e,n),sendToNative:e(t)}},r=({logger:t})=>{const r=({method:e,params:s})=>n(t)("content",e,s),a=o(t,(e=>r({method:"forwardToEthereumJs",params:e})));return{sendToContent:r,sendToEthereumJs:a,sendToBackground:(e,n={})=>s(t)("background",e,n),sendToNative:e(t)}},a=({logger:e,sessionId:n})=>({sendToPopup:({method:o,params:t})=>s(e,n)("popup",o,t),sendToEthereumJs:({method:e,params:s})=>((e,s,n={})=>window.postMessage({destination:e,method:s,params:n}))("ethereum",e,s),sendToBackground:(o,t={})=>s(e,n)("background",o,t)}),d=(i="background",(e,...s)=>console.log(`[${i}.js] ${e}`,...s));var i;const m=((e,s)=>{if("background"===e)return t(s);if("popup"===e)return r(s);if("content"===e)return a(s);throw new Error(`Unknown origin: ${e}`)})("background",{logger:d});m.sendToNative("hello-fren","tmp",{}),browser.runtime.onMessage.addListener((async(e,s,n)=>{d(`Received message from browser runtime: ${JSON.stringify(e)}`);(async(s,n)=>{const{destination:o,method:t,sessionId:r,params:a}=e;"background"===o&&t===s&&(d(`Received method '${t}' with params: ${JSON.stringify(a)}`),await n(a,r))})("getState",(async(e,s)=>{const[o]=await m.sendToNative("eth_getAccounts",s),t=await m.sendToNative("eth_getBalance",s);n({address:o,balance:t}),m.sendToPopup("updateState",{address:o,balance:t})}))})),d("loaded")})();
//# sourceMappingURL=background.js.map
