(()=>{const e=e=>async(s,t,n={})=>{const a={method:s,params:n};e(`Sending message to SafariWebExtensionHandler: ${JSON.stringify(a)}`);const r=await browser.runtime.sendNativeMessage("ignored",a);if(e(`Result from message: ${JSON.stringify(r)}`),r.error)throw new Error(`Received error from SafariWebExtensionHandler: ${JSON.stringify(r)}`);return r},s=(e,s)=>(t,n,a={})=>{const r={destination:t,method:n,params:a,sessionId:s};return e(`Sending message to browser runtime: ${JSON.stringify(r)}`),browser.runtime.sendMessage(r)},t=(e,s)=>(t,n,a={})=>{const r={destination:t,method:n,params:a,sessionId:s};e(`Sending message to browser tabs: ${JSON.stringify(r)}`),browser.tabs.query({active:!0,currentWindow:!0},(e=>{const[s]=e;s&&s.id&&browser.tabs.sendMessage(s.id,r)}))},n=(e,s)=>(t,n={})=>{const a={method:t,params:n};return e(`Sending message to Ethereum.js: ${JSON.stringify(a)}`),s(a)},a=e=>(e,s,t={})=>window.postMessage({destination:e,method:s,params:t}),r=({logger:a})=>{const r=({method:e,params:s})=>t(a)("content",e,s),o=n(a,(e=>r({method:"forwardToEthereumJs",params:e})));return{sendToContent:r,sendToEthereumJs:o,sendToPopup:(e,t={})=>s(a)("popup",e,t),sendToNative:e(a)}},o=({logger:a})=>{const r=({method:e,params:s})=>t(a)("content",e,s),o=n(a,(e=>r({method:"forwardToEthereumJs",params:e})));return{sendToContent:r,sendToEthereumJs:o,sendToBackground:(e,t={})=>s(a)("background",e,t),sendToNative:e(a)}},d=({logger:e,sessionId:t})=>({sendToPopup:({method:n,params:a})=>s(e,t)("popup",n,a),sendToEthereumJs:({method:e,params:s})=>a()("ethereum",e,s),sendToBackground:(n,a={})=>s(e,t)("background",n,a)}),i=({logger:e})=>({sendToContent:({method:e,params:s})=>a()("content",e,s)}),g=(m="background",(e,...s)=>{const t=new XMLHttpRequest;t.onload=e=>{},t.open("POST",`http://localhost:8081/add?message=${e}&sender=${m}.js`,!0),t.send()});var m;const c=((e,s)=>{if("background"===e)return r(s);if("popup"===e)return o(s);if("content"===e)return d(s);if("ethereum"===e)return i(s);throw new Error(`Unknown origin: ${e}`)})("background",{logger:g});browser.runtime.onMessage.addListener(((e,s,t)=>{g(`Received message from browser runtime: ${JSON.stringify(e)}`);const n=async(s,t)=>{const{destination:n,method:a,sessionId:r,params:o}=e;"background"===n&&a===s&&(g(`Received method '${a}' with params: ${JSON.stringify(o)}`),await t(o,r))};return n("getState",(async(e,s)=>{const[n]=await c.sendToNative("eth_getAccounts",s),a=await c.sendToNative("eth_getBalance",s,{address:n,block:"latest"});t({address:n,balance:a}),c.sendToPopup("updateState",{address:n,balance:a})})),n("eth_signTypedData_v3",(async(e,s)=>{g("eth_signTypedData_v3: sending to native",e);const n=await c.sendToNative("signTypedData",s,{version:"v3",address:e[0],data:e[1]});g(`eth_signTypedData_v3 response: ${JSON.stringify(n)}`),t({signature:n})})),n("eth_signTypedData_v4",(async(e,s)=>{g("eth_signTypedData_v4: sending to native",e);const n=await c.sendToNative("signTypedData",s,{version:"v4",address:e[0],data:e[1]});g(`eth_signTypedData_v4 response: ${JSON.stringify(n)}`),t({signature:n})})),!0})),g("loaded")})();
//# sourceMappingURL=background.js.map
