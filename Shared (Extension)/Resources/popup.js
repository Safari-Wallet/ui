(()=>{const e=e=>(n,t,s={})=>{const o={method:n,sessionId:t,params:s};return e(`Sending message to SafariWebExtensionHandler: ${JSON.stringify(o)}`),browser.runtime.sendNativeMessage("ignored",o.method)},n=(e,n)=>(t,s,o={})=>{const a={destination:t,method:s,params:o,sessionId:n};return e(`Sending message to browser runtime: ${JSON.stringify(a)}`),browser.runtime.sendMessage(a)},t=(e,n)=>(t,s,o={})=>{const a={destination:t,method:s,params:o,sessionId:n};e(`Sending message to browser tabs: ${JSON.stringify(a)}`),browser.tabs.query({active:!0,currentWindow:!0},(e=>{const[n]=e;n&&n.id&&browser.tabs.sendMessage(n.id,a)}))},s=(e,n)=>(t,s={})=>{const o={method:t,params:s};return e(`Sending message to Ethereum.js: ${JSON.stringify(o)}`),n(o)},o=({logger:o})=>{const a=({method:e,params:n})=>t(o)("content",e,n),d=s(o,(e=>a({method:"forwardToEthereumJs",params:e})));return{sendToContent:a,sendToEthereumJs:d,sendToPopup:(e,t={})=>n(o)("popup",e,t),sendToNative:e(o)}},a=({logger:o})=>{const a=({method:e,params:n})=>t(o)("content",e,n),d=s(o,(e=>a({method:"forwardToEthereumJs",params:e})));return{sendToContent:a,sendToEthereumJs:d,sendToBackground:(e,t={})=>n(o)("background",e,t),sendToNative:e(o)}},d=({logger:e,sessionId:t})=>({sendToPopup:({method:s,params:o})=>n(e,t)("popup",s,o),sendToEthereumJs:({method:e,params:n})=>((e,n,t={})=>window.postMessage({destination:e,method:n,params:t}))("ethereum",e,n),sendToBackground:(s,o={})=>n(e,t)("background",s,o)}),r=e=>"#"===e[0]?document.querySelector(e):document.querySelectorAll(e);const i=()=>window.close();const c={loading:{render:()=>"\n        <h1>Loading...</h1>\n    "},root:{render:()=>'\n        <h1>Safari Wallet</h1>\n        <div class="flex">\n            <button id="cancel" class="button button--secondary">Cancel</button>\n            <button id="connect" class="button button--primary">Connect</button>\n        </div>\n    '},connectWallet:{render:({address:e,balance:n})=>`\n        <h1>Connect to <span id="title"></span></h1>\n        <p class="subtitle"><span id="host"></span></p>\n        <p>When you connect your wallet, this dapp will be able to view the contents:</p>\n        <div class="field">\n            <label class="field__label" for="address">Address</label>\n            <input id="address" class="field__input" type="text" value="${e}" disabled>\n        </div>\n        <div class="field">\n            <label class="field__label" for="balance">ETH Balance</label>\n            <input id="balance" class="field__input" type="text" value="${n} ${m[h].gasToken}" disabled>\n        </div>\n        <div class="flex">\n            <button id="cancel" class="button button--secondary">Cancel</button>\n            <button id="connect" class="button button--primary">Connect</button>\n        </div>\n    `,onRender:({onConnectWallet:e})=>{r("#cancel")?.addEventListener("click",i),r("#connect")?.addEventListener("click",e),browser.tabs.query({active:!0,currentWindow:!0},(e=>{const n=e[0],t=r("#title"),s=r("#host");t&&n.title&&(t.textContent=n.title),s&&n.url&&(s.textContent=new URL(n.url).host)}))}},signMessage:{render:()=>'\n        <h1>Sign Message</h1>\n        <div class="flex">\n            <button id="cancel" class="button button--secondary">Cancel</button>\n            <button id="sign" class="button button--primary">Sign</button>\n        </div>\n    ',onRender:({signMessage:e})=>{const n=r("#cancel"),t=r("#sign");n&&n.addEventListener("click",i),t&&t.addEventListener("click",e)}}},l=(e,n={})=>{if(!e||!Object.keys(c).includes(e))return void b(`Invalid view name: ${e}.`);const t=c[e];if(!t||!t.render)return void b(`Invalid view: ${e}.`);const s=r("#body");if(!s)return void b("Could not find body element.");const o=((e,n)=>c[e].render(n))(e,n);u(`Rendering view '${e}' with ${JSON.stringify(n)}`),u(`View contents: ${o}`),u(`Existing HTML: ${s.innerHTML}`),s.innerHTML=o,u(`Updated HTML: ${s.innerHTML}`),t.onRender&&t.onRender(n)},u=(p="popup",(e,...n)=>console.log(`[${p}.js] ${e}`,...n));var p;const b=(e=>(n,...t)=>console.error(`[${e}.js] ${n}`,...t))("popup"),g=((e,n)=>{if("background"===e)return o(n);if("popup"===e)return a(n);if("content"===e)return d(n);throw new Error(`Unknown origin: ${e}`)})("popup",{logger:u}),m={1:{gasToken:"ETH"}},h=1;document.addEventListener("DOMContentLoaded",(()=>{var e,n;n=({address:e,balance:n})=>{l("connectWallet",{address:e,balance:n,onConnectWallet:()=>{g.sendToEthereumJs("walletConnected",{address:e,balance:n,chainId:h}),i()}})},u(`Listening to popup.${e="updateState"}`),browser.runtime.onMessage.addListener(((t,s)=>{const{destination:o,method:a,params:d}=t;"popup"===o&&a===e&&(u(`Received method '${a}' with params: ${JSON.stringify(d)}`),n(d,""))})),l("loading"),g.sendToBackground("getState"),u("loaded")}))})();
//# sourceMappingURL=popup.js.map
